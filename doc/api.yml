openapi: '3.0.2'
info:
  title: WASAPhoto Backend API
  version: '1.0'

security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$' 
                  minLength: 3
                  maxLength: 16
        required: true
      security: []
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    format: uuid
                    example: "1bce29f4-4958-4dbb-9d93-d84e99748a1b"
  /settings/username:
    put:
      tags: ["username"]
      summary: Sets the username of the logged in user
      description: |-
        Sets the username of the logged in user with data specified in request body.
      operationId: setMyUserName
      requestBody:
        description: New username.
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$' 
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: Username set successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /photos/:
    post:
      tags: ["photos"]
      summary: Uploads a new photo
      description: |-
        Uploads a new photo authored by the logged in user.
      operationId: uploadPhoto
      requestBody:
        description: Photo and caption.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                caption:
                  type: string
                  minLength: 0
                  maxLength: 2000
        required: true
      responses:
        "201":
          description: Photo uploaded successfully.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
    delete:
      tags: ["photos"]
      summary: Deletes a photo
      description: |-
        If the logged in user is the author of the photo
        with id given in path, it deletes the photo;
        otherwise, it returns an error.
      operationId: deletePhoto
      responses:
        "200":
          description: Photo was deleted successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Logged in user is not the author of the photo.
        "404":
          description: Photo not found.
        "500":
          $ref: "#/components/responses/InternalServerError"
  /following/:
    put:
      tags: ["following"]
      summary: Adds user to following
      description: |-
        If the logged in user is not banned by user given in request body
        it adds user to following of logged in user;
        otherwise it returns an error.
      operationId: followUser
      requestBody:
        description: The user to add to following.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$' 
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: User was added successfully to following.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description: Logged in user is banned by user given in request body.
        "404":
          description: User not found.
        "500":
          $ref: "#/components/responses/InternalServerError"
  /following/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    delete:
      tags: ["following"]
      summary: Removes user from following
      description: |-
        Removes user given in path from following of the logged in user;
        it does nothing if the given user is already not in following of the
        logged in user.
      operationId: unfollowUser
      responses:
        "200":
          description: User was removed successfully from following.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: User was not found.
        "500":
          $ref: "#/components/responses/InternalServerError"
  /bans/:
    put:
      tags: ["bans"]
      summary: Adds user to bans
      description: |-
        It adds user given in request body to bans of logged in user.
      operationId: banUser
      requestBody:
        description: The user to add to bans.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$' 
                  minLength: 3
                  maxLength: 16 
        required: true
      responses:
        "200":
          description: User was added successfully to bans.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: User not found.
        "500":
          $ref: "#/components/responses/InternalServerError"
  /bans/{username}:
    parameters:
        - $ref: "#/components/parameters/username"
    delete:
      tags: ["bans"]
      summary: Removes user from bans
      description: |-
        It removes user given in path from bans of the logged in user;
        it does nothing if user given in path is already not in bans.
      operationId: unbanUser
      responses:
        "200":
          description: User was removed successfully from bans.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: User was not found.
        "500":
          $ref: "#/components/responses/InternalServerError"   

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: uuid
  parameters:
    username:
      in: path
      name: username
      required: true
      schema:
        type: string
        example: Maria
        pattern: 'ˆ.*?$' 
        minLength: 3
        maxLength: 16
    photoId:
      in: path
      name: photoId
      required: true
      schema:
        type: string
        format: uuid
        example: "1bce29f4-4958-4dbb-9d93-d84e99748a1b"
  responses:
    UnauthorizedError:
      description: Authorization identifier is missing or invalid.
    BadRequest:
      description: Bad request
    InternalServerError:
      description: Unexpected condition was encountered.