openapi: '3.0.2'
info:
  title: WASAPhoto Backend API
  version: '1.0'

security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody: { $ref: "#/components/requestBodies/DoLogin" }
      security: []
      responses:
        '201': { $ref: "#/components/responses/SuccessfulDoLogin" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/:
    post:
      tags: ["photos"]
      summary: Uploads a new photo
      description: |-
        Uploads a new photo authored by the logged in user.
      operationId: uploadPhoto
      requestBody: { $ref: "#/components/requestBodies/UploadPhoto" }
      responses:
        '201': { $ref: "#/components/responses/SuccessfulUploadPhoto" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '413': { $ref: "#/components/responses/ContentTooLarge" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
    get:
      tags: ["photos"]
      summary: Get a photo
      description: |-
        If the logged in user is not banned by the author of the photo,
        it returns the requested photo; otherwise it returns an error.
      operationId: getPhoto
      responses:
        '200': { $ref: "#/components/responses/SuccessfulGetPhoto" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["photos"]
      summary: Deletes a photo
      description: |-
        If the logged in user is the author of the photo
        with id given in path, it deletes the photo;
        otherwise, it returns an error.
      operationId: deletePhoto
      responses:
        '200': { $ref: "#/components/responses/SuccessfulDeletePhoto" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/{photoId}/likes/:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
    get:
      tags: ["likes"]
      summary: Gets the likes for a photo
      description: |-
        If the logged in user is not banned by the author of the photo, it returns
        the list of users who liked the photo; otherwise it returns an error.
      operationId: getLikes
      responses:
        '200': { $ref: "#/components/responses/SuccessfulGetLikes" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/{photoId}/comments/:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
    get:
      tags: ["comments"]
      summary: Get the comments for a photo
      description: |-
        If the logged in user is not banned by the author of the photo, it returns
        the list of comments the photo; otherwise it returns an error.
      operationId: getComments
      responses:
        '200': { $ref: "#/components/responses/SuccessfulGetComments" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
    post:
      tags: ["comments"]
      summary: Adds a comment to a photo.
      description: |-
        If the logged in user is not banned by the author of the photo, it adds
        a comment to the photo; otherwise it returns an error.
      operationId: commentPhoto
      requestBody: { $ref: "#/components/requestBodies/CommentPhoto" }
      responses:
        '201': { $ref: "#/components/responses/SuccessfulCommentPhoto" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '413': { $ref: "#/components/responses/ContentTooLarge"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
      - $ref: "#/components/parameters/PathCommentId"
    delete:
      tags: ["comments"]
      summary: Removes a comment from a photo
      description: |-
        If the logged in user is the author of the comment, it removes it;
        otherwise it returns an error.
      operationId: uncommentPhoto
      responses:
        '201': { $ref: "#/components/responses/SuccessfulUncommentPhoto" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
  /users/:
    parameters:
      - $ref: "#/components/parameters/QueryStringUsername"
    get:
      tags: ["users"]
      summary: Get users matching given username.
      description: |-
        Returns an array of users that match the username given in query.
      operationId: searchUser
      responses:
        '200': { $ref: "#/components/responses/SuccessfulSearchUser" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /users/{userId}/following/:
    parameters:
      - $ref: "#/components/parameters/PathUserId"
    get:
      tags: ["users"]
      summary: Get the following of a user
      description: |-
        If the logged in user is not banned by the user with userId given in path,
        it returns the list of its following; otherwise it returns an error.
      operationId: getFollowing
      responses:
        '200': { $ref: "#/components/responses/SuccessfulGetFollowing" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
  /users/{userId}/followers/:
    parameters:
      - $ref: "#/components/parameters/PathUserId"
    get:
      tags: ["users"]
      summary: Get the followers of a user
      description: |-
        If the logged in user is not banned by the user with userId given in path,
        it returns the list of its followers; otherwise it returns an error.
      operationId: getFollowers
      responses:
        '200': { $ref: "#/components/responses/SuccessfulGetFollowers" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
  /likes/{photoId}:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
    put:
      tags: ["likes"]
      summary: Adds a like to a photo
      description: |-
        If the logged in user is not banned by the author of the photo, it adds a like
        to the photo with photoId given in path; otherwise it returns an error.
      operationId: likePhoto
      responses:
        '200': { $ref: "#/components/responses/SuccessfulLikePhoto" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["likes"]
      summary: Removes the like from a photo
      description: |-
        It removes a like from the photo with photoId given in path
        (or does nothing if the photo already does not have a like);
        otherwise it returns an error.
      operationId: unlikePhoto
      responses:
        '200': { $ref: "#/components/responses/SuccessfulUnlikePhoto" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
  /following/{userId}:
    parameters:
       - $ref: "#/components/parameters/PathUserId"
    put:
      tags: ["following"]
      summary: Adds a user to following
      description: |-
        If the logged in user is not banned by the user with userId given in path,
        it adds him/her to the following of the logged in user;
        otherwise it returns an error.
      operationId: followUser
      responses:
        '201': { $ref: "#/components/responses/SuccessfulFollowUser" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["following"]
      summary: Removes a user from following
      description: |-
        It unfollows the user with userId given in path
        (or does nothing if it is alerady not followed);
        otherwise it returns an error.
      operationId: unfollowUser
      responses:
        '200': { $ref: "#/components/responses/SuccessfulUnfollowUser" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
  /bans/{userId}:
    parameters:
       - $ref: "#/components/parameters/PathUserId"
    put:
      tags: ["bans"]
      summary: Adds a user to bans
      description: |-
        It adds the user with userId given in path to the bans of the logged in user.
      operationId: banUser
      responses:
        '201': { $ref: "#/components/responses/SuccessfulBanUser" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["bans"]
      summary: Removes a user from following
      description: |-
        It removes the user with userId given in path from the bans of the logged in user.
      operationId: unbanUser
      responses:
        '200': { $ref: "#/components/responses/SuccessfulUnbanUser" }
        '401': { $ref: "#/components/responses/Unauthorized" }
        '403': { $ref: "#/components/responses/Forbidden"}
        '404': { $ref: "#/components/responses/NotFound"}
        '500': { $ref: "#/components/responses/InternalServerError" }

components:
  schemas:
    # Fields
    errorMessage:
      description: An error message.
      type: string
    date-time:
      description: A date-time.
      type: string
      format: date-time
    text:
      type: string
      minLength: 0
      maxLength: 2200
    username:
      description: Username associated with a unique user.
      type: string
      example: Maria
      pattern: 'ˆ.*?$' 
      minLength: 3
      maxLength: 16
    userId:
      description: UUID associated with a unique user.
      type: string
      format: uuid
    photoId:
      description: UUID associated with a unique photo.
      type: string
      format: uuid
    commentId:
      description: UUID associated with a unique comment.
      type: string
      format: uuid
    # Objects
    User:
      description: An existing user.
      type: object
      properties:
        userId: { $ref: "#/components/schemas/userId" }
        username: { $ref: "#/components/schemas/username"}
    UserList:
      description: A list of users.
      type: array
      items: { $ref: "#/components/schemas/User" }
    Comment:
      description: A comment.
      type: object
      properties:
        commentId: { $ref: "#/components/schemas/commentId" }
        comment: { $ref: "#/components/schemas/text"}
        author: { $ref: "#/components/schemas/User" }
        date-time: { $ref: "#/components/schemas/date-time" }
    CommentList:
      description: A list of comments.
      type: array
      items: { $ref: "#/components/schemas/Comment" }
  requestBodies:
    DoLogin:
      description: User details.
      content:
        application/json:
          schema:
            type: object
            properties:
              username: { $ref: "#/components/schemas/username"}
      required: true
    UploadPhoto:
      description: Photo and caption.
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              photo:
                type: string
                format: binary
                maxLength: 10485760 # 10MB
              caption: { $ref: "#/components/schemas/text"}
      required: true
    CommentPhoto:
      description: Comment to add to the photo.
      content:
        application/json:
          schema:
            type: object
            properties:
              comment: { $ref: "#/components/schemas/text"}
  responses:
    InternalServerError:
      description: Unexpected condition was encountered.
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { $ref: "#/components/schemas/errorMessage" }
    Unauthorized:
      description: Authorization identifier is missing or invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { $ref: "#/components/schemas/errorMessage" }
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { $ref: "#/components/schemas/errorMessage" }
    Forbidden:
      description: Logged in user cannot perform the requested operation.
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { $ref: "#/components/schemas/errorMessage" }
    NotFound:
      description: Requested resource was not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { $ref: "#/components/schemas/errorMessage" }
    ContentTooLarge:
      description: Content provided in request is too large.
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { $ref: "#/components/schemas/errorMessage" }
    SuccessfulDoLogin:
      description: User log-in action successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              identifier: { $ref: "#/components/schemas/userId" }
    SuccessfulUploadPhoto:
      description: Photo uploaded successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              identifier: { $ref: "#/components/schemas/photoId" }
    SuccessfulGetPhoto:
      description: The requested photo.
      content:
        image/png:
          schema:
            type: string
            format: binary
    SuccessfulDeletePhoto:
      description: Photo was deleted successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              identifier: { $ref: "#/components/schemas/photoId" }
    SuccessfulLikePhoto:
      description: A like was added to the photo.
    SuccessfulUnlikePhoto:
      description: The like was removed from the photo.
    SuccessfulGetLikes:
      description: A list of users who liked the photo.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/UserList" }
    SuccessfulGetComments:
      description: A list of comments for the photo.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/CommentList" }
    SuccessfulCommentPhoto:
      description: A comment was successfully added to the photo.
      content:
        application/json:
          schema:
            type: object
            properties:
              identifier: { $ref: "#/components/schemas/commentId" }
    SuccessfulUncommentPhoto:
      description: A comment was successfully added to the photo.
      content:
        application/json:
          schema:
            type: object
            properties:
              identifier: { $ref: "#/components/schemas/commentId" }
    SuccessfulSearchUser:
      description: A list of users matching the given username.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/UserList" }
    SuccessfulGetFollowing:
      description: The list of following of the user.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/UserList" }
    SuccessfulGetFollowers:
      description: The list of followers of the user.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/UserList" }
    SuccessfulFollowUser:
      description: User was added succesfully to following.
    SuccessfulUnfollowUser:
      description: User was removed successfully from following.
    SuccessfulBanUser:
      description: User was added succesfully to bans.
    SuccessfulUnbanUser:
      description: User was removed succesfully from bans.
  parameters:
    QueryStringUsername:
      description: Username passed in query string.
      name: username
      in: query
      schema: { $ref: "#/components/schemas/username"}
      required: true
    PathUserId:
      description: User identifier.
      name: userId
      in: path
      schema: { $ref: "#/components/schemas/userId" }
      required: true
    PathPhotoId:
      description: Photo identifier.
      name: photoId
      in: path
      schema: { $ref: "#/components/schemas/photoId" }
      required: true
    PathCommentId:
      description: Comment identifier.
      name: commentId
      in: path
      schema: { $ref: "#/components/schemas/commentId" }
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: uuid
