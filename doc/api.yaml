openapi: "3.0.2"
info:
  title: WASAPhoto Backend API
  version: "1.0"
  description: |-
    The WASAPhoto Backend API allows to perform the following operations:
    - Log in by specifying a username.
    - Get the a stream of photos (images) in reverse chronological order for the logged-in user,
      with information about when each photo was uploaded (date and time) and how many likes
      and comments it has. The stream is composed by photos from “following”
      (other users that the user follows).
    - Place (or  remove) a “like” to photos from other users.
    - Add comments to any image (even those uploaded by themself), and remove
      them (only authors can remove their comments).
    - Ban other users and remove the ban.
    - Get users profiles showing: the user’s photos (in reverse chronological order),
      how many photos have been uploaded, and the user’s followers and following.
    - Change username.
    - Upload photos and remove photos (removal of an image will also remove likes and comments).
    - Follow/unfollow other users.
    - Search other user profiles via username.

servers:
  - url: http://localhost:3000

security:
  - bearerAuth: []

tags:
  - name: login
  - name: settings
  - name: photos
  - name: likes
  - name: comments
  - name: users
  - name: profile
  - name: following
  - name: bans
  - name: stream

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody: { $ref: "#/components/requestBodies/DoLogin" }
      security: []
      responses:
        "201": { $ref: "#/components/responses/SuccessfulDoLogin" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /settings/username:
    put:
      tags: ["settings"]
      summary: Updates the username
      description: |-
        It updates the username of the logged-in user with the new
        username provided in request body; it returns `Forbidden Error` if the new
        username is already taken by another user.
      operationId: setMyUserName
      requestBody: { $ref: "#/components/requestBodies/SetMyUserName" }
      responses:
        "204": { $ref: "#/components/responses/SuccessfulSetMyUserName" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /photos/:
    post:
      tags: ["photos"]
      summary: Uploads a new photo
      description: |-
        Uploads a new photo authored by the logged-in user.
      operationId: uploadPhoto
      requestBody: { $ref: "#/components/requestBodies/UploadPhoto" }
      responses:
        "201": { $ref: "#/components/responses/SuccessfulUploadPhoto" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "413": { $ref: "#/components/responses/RequestEntityTooLarge" }
        "415": { $ref: "#/components/responses/UnsupportedMediaType" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      parameters:
        - $ref: "#/components/parameters/StartDate"
        - $ref: "#/components/parameters/StartId"
        - $ref: "#/components/parameters/QueryStringUserId"
      tags: ["photos"]
      summary: Gets a list of photos
      description: |-
        If the logged-in user is not banned by the user with `userId` specified
        in query string, it returns a list of photos authored by that user;
        otherwise it returns an error.
      operationId: getPhotos
      responses:
        "200": { $ref: "#/components/responses/SuccessfulGetPhotos" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
    get:
      tags: ["photos"]
      summary: Gets a photo
      description: |-
        If the logged-in user is not banned by the author of the photo,
        it returns the requested photo; otherwise it returns an error.
      operationId: getPhoto
      security: []
      responses:
        "200": { $ref: "#/components/responses/SuccessfulGetPhoto" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["photos"]
      summary: Deletes a photo
      description: |-
        If the logged-in user is the author of the photo
        with `photoId` given in path, it deletes the photo;
        otherwise, it returns an error.
      operationId: deletePhoto
      responses:
        "200": { $ref: "#/components/responses/SuccessfulDeletePhoto" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /photos/{photoId}/likes/:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
    get:
      parameters:
        - $ref: "#/components/parameters/StartId"
      tags: ["likes"]
      summary: Gets the likes for a photo
      description: |-
        If the logged-in user is not banned by the author of the photo, it returns
        the list of users who liked the photo; otherwise it returns an error.
      operationId: getLikes
      responses:
        "200": { $ref: "#/components/responses/SuccessfulGetLikes" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /photos/{photoId}/comments/:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
    get:
      parameters:
        - $ref: "#/components/parameters/StartDate"
        - $ref: "#/components/parameters/StartId"
      tags: ["comments"]
      summary: Gets the comments for a photo
      description: |-
        If the logged-in user is not banned by the author of the photo, it returns
        the list of comments of the photo; otherwise it returns an error.
      operationId: getComments
      responses:
        "200": { $ref: "#/components/responses/SuccessfulGetComments" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      tags: ["comments"]
      summary: Adds a comment to a photo
      description: |-
        If the logged-in user is not banned by the author of the photo, it adds
        a comment to the photo authored by the logged-in user;
        otherwise it returns an error.
      operationId: commentPhoto
      requestBody: { $ref: "#/components/requestBodies/CommentPhoto" }
      responses:
        "201": { $ref: "#/components/responses/SuccessfulCommentPhoto" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
      - $ref: "#/components/parameters/PathCommentId"
    delete:
      tags: ["comments"]
      summary: Removes a comment from a photo
      description: |-
        If the logged-in user is the author of the comment, it deletes it;
        otherwise it returns an error.
      operationId: uncommentPhoto
      responses:
        "200": { $ref: "#/components/responses/SuccessfulUncommentPhoto" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /users/:
    parameters:
      - $ref: "#/components/parameters/QueryStringUsername"
    get:
      parameters:
        - $ref: "#/components/parameters/StartId"
      tags: ["users"]
      summary: Gets users matching given username
      description: |-
        Returns an array of users that match the `username` given in query.
      operationId: searchUser
      responses:
        "200": { $ref: "#/components/responses/SuccessfulSearchUser" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /users/{userId}:
    parameters:
      - $ref: "#/components/parameters/PathUserId"
    get:
      tags: ["profile"]
      summary: Gets a user profile
      description: |-
        If the logged-in user is not banned by the user with `userId` given in path,
        it returns its profile; otherwise it returns an error.
      operationId: getUserProfile
      responses:
        "200": { $ref: "#/components/responses/SuccessfulGetUserProfile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /users/{userId}/following/:
    parameters:
      - $ref: "#/components/parameters/PathUserId"
    get:
      parameters:
        - $ref: "#/components/parameters/StartId"
      tags: ["users"]
      summary: Gets the following of a user
      description: |-
        If the logged-in user is not banned by the user with `userId` given in path,
        it returns the list of its following; otherwise it returns an error.
      operationId: getFollowing
      responses:
        "200": { $ref: "#/components/responses/SuccessfulGetFollowing" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /users/{userId}/followers/:
    parameters:
      - $ref: "#/components/parameters/PathUserId"
    get:
      parameters:
        - $ref: "#/components/parameters/StartId"
      tags: ["users"]
      summary: Gets the followers of a user
      description: |-
        If the logged-in user is not banned by the user with `userId` given in path,
        it returns the list of its followers; otherwise it returns an error.
      operationId: getFollowers
      responses:
        "200": { $ref: "#/components/responses/SuccessfulGetFollowers" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /liked-photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/PathPhotoId"
    put:
      tags: ["likes"]
      summary: Adds a like to a photo
      description: |-
        If the logged-in user is not banned by the author of the the photo with
        `photoId` given in path, it adds a like to the photo;
        otherwise it returns an error.
      operationId: likePhoto
      responses:
        "204": { $ref: "#/components/responses/SuccessfulLikePhoto" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["likes"]
      summary: Removes the like from a photo
      description: |-
        It removes the like from the photo with `photoId` given in path
        (or does nothing if the photo already does not have a like);
        otherwise it returns an error.
      operationId: unlikePhoto
      responses:
        "204": { $ref: "#/components/responses/SuccessfulUnlikePhoto" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /following/{userId}:
    parameters:
      - $ref: "#/components/parameters/PathUserId"
    put:
      tags: ["following"]
      summary: Adds a user to following
      description: |-
        If the logged-in user is not banned by the user with `userId` given in path,
        it adds him/her to the following of the logged-in user;
        otherwise it returns an error.
      operationId: followUser
      responses:
        "204": { $ref: "#/components/responses/SuccessfulFollowUser" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["following"]
      summary: Removes a user from following
      description: |-
        It unfollows the user with `userId` given in path
        (or does nothing if it is already not followed);
        otherwise it returns an error.
      operationId: unfollowUser
      responses:
        "204": { $ref: "#/components/responses/SuccessfulUnfollowUser" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /bans/{userId}:
    parameters:
      - $ref: "#/components/parameters/PathUserId"
    put:
      tags: ["bans"]
      summary: Adds a user to bans
      description: |-
        It adds the user with `userId` given in path to the bans of the logged-in user.
      operationId: banUser
      responses:
        "204": { $ref: "#/components/responses/SuccessfulBanUser" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["bans"]
      summary: Removes a user from bans
      description: |-
        It removes the user with `userId` given in path from the bans of the logged-in user.
      operationId: unbanUser
      responses:
        "204": { $ref: "#/components/responses/SuccessfulUnbanUser" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /stream:
    get:
      parameters:
        - $ref: "#/components/parameters/StartDate"
        - $ref: "#/components/parameters/StartId"
      tags: ["stream"]
      summary: Gets the stream of the logged-in user
      description: |-
        Returns a list of photos from followed users in reverse chronological
        order.
      operationId: getMyStream
      responses:
        "200": { $ref: "#/components/responses/SuccessfulGetMyStream" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  schemas:
    # Fields
    dateTime:
      description: A date-time.
      type: string
      format: date-time
      pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
      minLength: 20
      maxLength: 20
    text:
      description: A generic text that does not exceed 2200 characters.
      type: string
      example: lorem ipsum dolor sit amet.
      pattern: ".*"
      minLength: 0
      maxLength: 2200
    photo:
      description: A png photo of 10 MB maximum size in binary format.
      type: string
      format: binary
      pattern: "^[01]+$"
      minLength: 536
      maxLength: 10485760 # 10MB
    username:
      description: Username associated with a unique user.
      type: string
      example: Maria_03
      pattern: "^[a-zA-Z0-9_-]{3,16}$"
      minLength: 3
      maxLength: 16
    userId:
      description: UUID associated with a unique user.
      type: string
      format: uuid
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      minLength: 36
      maxLength: 36
    photoId:
      description: UUID associated with a unique photo.
      type: string
      format: uuid
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      minLength: 36
      maxLength: 36
    commentId:
      description: UUID associated with a unique comment.
      type: string
      format: uuid
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      minLength: 36
      maxLength: 36
    # Objects
    DateAndIdPaginator:
      description: A generic paginated list, ordered by date.
      type: object
      properties:
        lastDate:
          description: |-
            The date of the last record in the current response.
          type: string
          format: date-time
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
          minLength: 20
          maxLength: 20
        lastId:
          description: |-
            The id of the last record in the current response.
          type: string
          format: uuid
          pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          minLength: 36
          maxLength: 36
    IdPaginator:
      description: A generic paginated list.
      type: object
      properties:
        lastId:
          description: |-
            The id of the last record in the current response.
          type: string
          format: uuid
          pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          minLength: 36
          maxLength: 36
    User:
      description: An existing user.
      type: object
      properties:
        userId: { $ref: "#/components/schemas/userId" }
        username: { $ref: "#/components/schemas/username" }
    UserList:
      description: A list of users.
      allOf:
        - $ref: "#/components/schemas/IdPaginator"
        - type: object
          properties:
            records:
              description: An array of users.
              type: array
              items: { $ref: "#/components/schemas/User" }
              minItems: 0
              maxItems: 20
    UserProfile:
      description: A user profile.
      type: object
      properties:
        userId: { $ref: "#/components/schemas/userId" }
        username: { $ref: "#/components/schemas/username" }
        numberOfPhotos:
          description: The number of photos posted by the user.
          type: integer
          format: int32
          minimum: 0
          example: 20
        numberOfFollowers:
          description: The number of followers of the user.
          type: integer
          format: int32
          minimum: 0
          example: 253
        numberOfFollowing:
          description: The number of following of the user.
          type: integer
          format: int32
          minimum: 0
          example: 253
        isFollowed:
          description: Wheter the user is followed by the logged-in user.
          type: boolean
    Photo:
      description: An existing photo.
      properties:
        photoId: { $ref: "#/components/schemas/photoId" }
        author: { $ref: "#/components/schemas/User" }
        dateTime: { $ref: "#/components/schemas/dateTime" }
        caption: { $ref: "#/components/schemas/text" }
        numberOfLikes:
          description: The number of likes of the photo.
          type: integer
          format: int32
          minimum: 0
          example: 53
        numberOfComments:
          description: The number of comments of the photo.
          type: integer
          format: int32
          minimum: 0
          example: 9
        isLiked:
          description: Wheter the photo is liked by the logged-in user.
          type: boolean
    PhotoList:
      description: A list of photos.
      allOf:
        - $ref: "#/components/schemas/DateAndIdPaginator"
        - type: object
          properties:
            records:
              description: An array of photos.
              type: array
              items: { $ref: "#/components/schemas/Photo" }
              minItems: 0
              maxItems: 20
    Comment:
      description: A comment.
      type: object
      properties:
        commentId: { $ref: "#/components/schemas/commentId" }
        text: { $ref: "#/components/schemas/text" }
        author: { $ref: "#/components/schemas/User" }
        dateTime: { $ref: "#/components/schemas/dateTime" }
    CommentList:
      description: A list of comments.
      allOf:
        - $ref: "#/components/schemas/DateAndIdPaginator"
        - type: object
          properties:
            records:
              description: An array of comments.
              type: array
              items: { $ref: "#/components/schemas/Comment" }
              minItems: 0
              maxItems: 20
  requestBodies:
    DoLogin:
      description: Request body for doLogin operation.
      content:
        application/json:
          schema:
            description: A username (new or existing).
            type: object
            properties:
              username: { $ref: "#/components/schemas/username" }
      required: true
    SetMyUserName:
      description: Request body for setMyUserName operation.
      content:
        application/json:
          schema:
            description: The new username.
            type: object
            properties:
              newUsername: { $ref: "#/components/schemas/username" }
      required: true
    UploadPhoto:
      description: Request body for uploadPhoto operation.
      content:
        multipart/form-data:
          schema:
            description: |-
              Photo and caption to be uploaded. Photo must be in png format and
              it must not exceed 10 MB. The caption must not exceed 2200 characters.
            type: object
            properties:
              photo: { $ref: "#/components/schemas/photo" }
              caption: { $ref: "#/components/schemas/text" }
      required: true
    CommentPhoto:
      description: Request body for commentPhoto operation.
      content:
        application/json:
          schema:
            description: |-
              Comment to add to the photo. The comment must not exceed 2200 characters.
            type: object
            properties:
              text: { $ref: "#/components/schemas/text" }
      required: true
  responses:
    InternalServerError:
      description: Unexpected condition was encountered.
    BadRequest:
      description: |-
        The server cannot or will not process the request due to an apparent client error.
    Unauthorized:
      description: Authorization identifier is missing or invalid.
    Forbidden:
      description: logged-in user cannot perform the requested operation.
    NotFound:
      description: Requested resource was not found.
    RequestEntityTooLarge:
      description: Content provided in request is too large.
    UnsupportedMediaType:
      description: Content media type provided in request is not supported.
    SuccessfulDoLogin:
      description: User log-in action successful.
      content:
        application/json:
          schema:
            description: The requested user UUID.
            type: object
            properties:
              userId: { $ref: "#/components/schemas/userId" }
    SuccessfulSetMyUserName:
      description: Username updated successfully.
    SuccessfulUploadPhoto:
      description: Photo uploaded successfully.
      content:
        application/json:
          schema:
            description: The UUID of the uploaded photo.
            type: object
            properties:
              photoId: { $ref: "#/components/schemas/photoId" }
    SuccessfulGetPhoto:
      description: The requested photo.
      content:
        image/png:
          schema: { $ref: "#/components/schemas/photo" }
    SuccessfulGetPhotos:
      description: The requested photos.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PhotoList" }
      links:
        GetPhotoByPhotoId: { $ref: "#/components/links/GetPhotoByPhotoId" }
    SuccessfulDeletePhoto:
      description: Photo was deleted successfully.
      content:
        application/json:
          schema:
            description: The UUID of the deleted photo.
            type: object
            properties:
              photoId: { $ref: "#/components/schemas/photoId" }
    SuccessfulLikePhoto:
      description: A like was added to the photo.
    SuccessfulUnlikePhoto:
      description: The like was removed from the photo.
    SuccessfulGetLikes:
      description: A list of users who liked the photo.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/UserList" }
    SuccessfulGetComments:
      description: A list of comments for the photo.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/CommentList" }
    SuccessfulCommentPhoto:
      description: A comment was successfully added to the photo.
      content:
        application/json:
          schema:
            description: The UUID of the newly added comment.
            type: object
            properties:
              commentId: { $ref: "#/components/schemas/commentId" }
    SuccessfulUncommentPhoto:
      description: The comment was successfully removed from the photo.
      content:
        application/json:
          schema:
            description: The UUID of the deleted comment.
            type: object
            properties:
              commentId: { $ref: "#/components/schemas/commentId" }
    SuccessfulSearchUser:
      description: A list of users matching the given username.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/UserList" }
    SuccessfulGetUserProfile:
      description: The requested user profile.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/UserProfile" }
      links:
        GetUserPhotosByUserId:
          { $ref: "#/components/links/GetUserPhotosByUserId" }
    SuccessfulGetFollowing:
      description: The list of following of the user.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/UserList" }
    SuccessfulGetFollowers:
      description: The list of followers of the user.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/UserList" }
    SuccessfulFollowUser:
      description: User was added successfully to following.
    SuccessfulUnfollowUser:
      description: User was removed successfully from following.
    SuccessfulBanUser:
      description: User was added successfully to bans.
    SuccessfulUnbanUser:
      description: User was removed successfully from bans.
    SuccessfulGetMyStream:
      description: The stream of the logged-in user.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/PhotoList" }
      links:
        GetPhotoByPhotoId: { $ref: "#/components/links/GetPhotoByPhotoId" }
  parameters:
    QueryStringUsername:
      description: Username passed in query string.
      name: username
      in: query
      schema: { $ref: "#/components/schemas/username" }
      required: true
    QueryStringUserId:
      description: User identifier passed in query string.
      name: userId
      in: query
      schema: { $ref: "#/components/schemas/userId" }
      required: true
    PathUserId:
      description: User identifier passed in path.
      name: userId
      in: path
      schema: { $ref: "#/components/schemas/userId" }
      required: true
    PathPhotoId:
      description: Photo identifier passed in path.
      name: photoId
      in: path
      schema: { $ref: "#/components/schemas/photoId" }
      required: true
    PathCommentId:
      description: Comment identifier passed in path.
      name: commentId
      in: path
      schema: { $ref: "#/components/schemas/commentId" }
      required: true
    StartDate:
      description: |-
        The date of the last record in the previous response.
        It is used for keyset pagination.
        It starts to the current date if not specified.
      name: startDate
      in: query
      schema:
        description: The date of the last record.
        type: string
        format: date-time
        pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
        minLength: 20
        maxLength: 20
      required: false
    StartId:
      description: |-
        The id of the last record in the previous response.
        It is used for keyset pagination.
        It starts from the first id if it is not specified.
      name: startId
      in: query
      schema:
        description: The id of the last record.
        type: string
        format: uuid
        pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
        minLength: 36
        maxLength: 36
      required: false
  links:
    GetPhotoByPhotoId:
      description: |-
        The `photoId` value in response can be used as `photoId` path parameter in
        `GET /photos/{photoId}`.
      operationId: getPhoto
      parameters:
        photoId: $response.body#/records/photoId
    GetUserPhotosByUserId:
      description: |-
        The `userId` value in response can be used as `userId` query string
        parameter in `GET /photos/`.
      operationId: getPhotos
      parameters:
        userId: $response.body#/records/userId

  securitySchemes:
    bearerAuth:
      description: |-
        Simplified bearer authentication using UUID of the user.
      type: http
      scheme: bearer
      bearerFormat: uuid
