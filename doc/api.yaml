openapi: '3.0.2'
info:
  title: WASAPhoto Backend API
  version: '1.0'

security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody: { $ref: "#/components/requestBodies/DoLogin" }
      security: []
      responses:
        '201': { $ref: "#/components/responses/SuccessfulDoLogin" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /photos/:
    post:
      tags: ["photos"]
      summary: Uploads a new photo
      description: |-
        Uploads a new photo authored by the logged in user.
      operationId: uploadPhoto
      requestBody: { $ref: "#/components/requestBodies/UploadPhoto" }
      responses:
        '201': { $ref: "#/components/responses/SuccessfulUploadPhoto" }
        '400': { $ref: "#/components/responses/BadRequest" }
        '401': { $ref: "#/components/responses/UnauthorizedError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
  /users/:
    parameters:
      - $ref: "#/components/parameters/QueryStringUsername"
    get:
      tags: ["users"]
      summary: Users matching given username.
      description: |-
        Returns an array of users that match the username given in query.
      operationId: searchUser
      responses:
        '201': { $ref: "#/components/responses/SuccessfulSearchUser" }
        '401': { $ref: "#/components/responses/UnauthorizedError" }
        '500': { $ref: "#/components/responses/InternalServerError" }

components:
  schemas:
    # Fields
    username:
      description: Username associated with a unique user.
      type: string
      example: Maria
      pattern: 'Ë†.*?$' 
      minLength: 3
      maxLength: 16
    userId:
      description: UUID associated with a unique user.
      type: string
      format: uuid
    photoId:
      description: UUID associated with a unique photo.
      type: string
      format: uuid
    # Objects
    User:
      description: An existing user.
      type: object
      properties:
        userId: { $ref: "#/components/schemas/userId" }
        username: { $ref: "#/components/schemas/username"}
  requestBodies:
    DoLogin:
      description: User details.
      content:
        application/json:
          schema:
            type: object
            properties:
              username: { $ref: "#/components/schemas/username"}
      required: true
    UploadPhoto:
      description: Photo and caption.
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              photo:
                type: string
                format: binary
                maxLength: 10485760 # 10MB
              caption:
                type: string
                minLength: 0
                maxLength: 2200
      required: true
  responses:
    InternalServerError:
      description: Unexpected condition was encountered.
    UnauthorizedError:
      description: Authorization identifier is missing or invalid.
    BadRequest:
      description: Bad request.
    SuccessfulDoLogin:
      description: User log-in action successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              identifier: { $ref: "#/components/schemas/userId" }
    SuccessfulUploadPhoto:
      description: Photo uploaded successfully.
      content:
        application/json:
          schema:
            type: object
            properties:
              identifier: { $ref: "#/components/schemas/photoId" }
    SuccessfulSearchUser:
      description: A list of users.
      content:
        application/json:
          schema:
            type: array
            items: { $ref: "#/components/schemas/User" }
  parameters:
    QueryStringUsername:
      name: username
      in: query
      schema: { $ref: "#/components/schemas/username"}
      required: true
    PathUserId:
      name: userId
      in: path
      schema: { $ref: "#/components/schemas/userId" }
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: uuid
